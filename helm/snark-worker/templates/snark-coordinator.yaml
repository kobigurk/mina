# {{ range $config := $.Values.snarkSetConfigs}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{$.Values.snarkSetConfigs.coordinatorName }}
  labels:
    app: {{$.Values.snarkSetConfigs.coordinatorName}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{$.Values.snarkSetConfigs.coordinatorName }}
  template:
    metadata:
      labels:
        app: {{$.Values.snarkSetConfigs.coordinatorName}}
        testnet: {{ $.Values.testnetName }}
        role: snark-coordinator
        version: {{ trunc 6 (split ":" $.Values.coda.image)._1 | trimSuffix "-" }}
        syncStatus: INIT
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: {{ $.Values.coda.ports.metrics | quote }}
        prometheus.io/path: '/metrics'
    spec:
      containers:
      - name: coordinator
        resources:
          limits:
          requests:
            memory: 24Gi
            cpu: 8.0
        image: {{ $.Values.coda.image }}
        {{ if $.Values.coda.useCustomEntrypoint -}}
        command: [{{ $.Values.coda.customEntrypoint }}]
        {{- end }}
        args: [ "daemon",
          "-log-level", "Debug",
          "-log-json",
          "-config-directory", "/root/.mina-config",
          "-log-snark-work-gossip", "true",
          "-client-port", "$(DAEMON_CLIENT_PORT)",
          "-rest-port", "$(DAEMON_REST_PORT)",
          "-external-port", "$(DAEMON_EXTERNAL_PORT)",
          "-metrics-port", "$(DAEMON_METRICS_PORT)",
          "-run-snark-coordinator", "$(CODA_SNARK_KEY)",
          "-snark-worker-fee", "$(CODA_SNARK_FEE)",
          "-work-selection", "$(WORK_SELECTION)",
          "-enable-peer-exchange", "true",
          {{- if $.Values.coda.logTxnPoolGossip }}
          "-log-txn-pool-gossip", "true",
          {{- end -}}
          {{- if $.Values.coda.runtimeConfig }}
          "-config-file", "/config/daemon.json",
          {{- end }}
          {{- range $.Values.coda.seedPeers }}
          "-peer", {{ . | quote }},
          {{- end }}
          {{- if $.Values.coda.seedPeersURL }}
          "-peer-list-url", {{ $.Values.coda.seedPeersURL | quote }},
          {{- end }}
          "-generate-genesis-proof", {{ $.Values.coda.generateGenesisProof | quote }},
          {{- if $.Values.coda.enableArchive }}
          "-archive-address", {{ $.Values.coda.archiveAddress }}
          {{- end -}}
        ]
        env:
        - name: "RAYON_NUM_THREADS"
          value: "7"
        - name: DAEMON_REST_PORT
          value: {{ $.Values.coda.ports.graphql | quote }}
        - name: DAEMON_CLIENT_PORT
          value: {{ $.Values.coda.ports.client | quote }}
        - name: DAEMON_METRICS_PORT
          value: {{ $.Values.coda.ports.metrics | quote }}
        - name: CODA_CLIENT_TRUSTLIST
          value: "10.0.0.0/8"
        - name: CONNECT_PRIVATE_IPS
          value: "true"
        - name: CODA_SNARK_KEY
          value: {{ $.Values.snarkSetConfigs.publicKey | quote }}
        - name: CODA_SNARK_FEE
          value: {{ $.Values.snarkSetConfigs.snarkFee | quote }}
        - name: DAEMON_EXTERNAL_PORT
          value: {{ $.Values.coda.ports.p2p | quote }}
        - name: WORK_SELECTION
          value: {{$.Values.snarkSetConfigs.workSelectionAlgorithm | quote }}
        ports:
        - name: client-port
          protocol: TCP 
          containerPort: {{ $.Values.coda.ports.client }}
        - name: graphql-port
          protocol: TCP 
          containerPort: {{ $.Values.coda.ports.graphql }}
        - name: metrics-port
          protocol: TCP 
          containerPort: {{ $.Values.coda.ports.metrics }}
        - name: external-port
          protocol: TCP 
          containerPort: {{ $.Values.coda.ports.p2p }}
          hostPort: {{ $.Values.coda.ports.p2p }}
{{$name := $.Values.snarkSetConfigs.coordinatorName }}
{{$data := dict "name" $name "healthcheck" $.Values.healthcheck }}
{{- include "healthcheck.snarkCoordinator.allChecks" $data | indent 8 }}
        imagePullPolicy: Always
      {{- if $.Values.coda.runtimeConfig }}
        volumeMounts:
        - name: daemon-config
          mountPath: "/config/"
      volumes:
      - name: daemon-config
        configMap:
          name: {{$.Values.snarkSetConfigs.coordinatorName }}-daemon-config
      {{- end }}
{{- include "nodeSelector.preemptible" $.Values | indent 6 }}
{{- end }}
